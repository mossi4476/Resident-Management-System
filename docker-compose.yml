version: "3.9"

services:
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: rmsa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: rmsa-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: rmsa-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL for Prisma datasource
  mysql:
    image: mysql:8.0
    container_name: rmsa-mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 20s
      timeout: 10s
      retries: 5

  # MinIO for object storage (attachments)
  minio:
    image: minio/minio:latest
    container_name: rmsa-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Console UI
    volumes:
      - minio_data:/data

  # MailHog for local SMTP testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: rmsa-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI

  backend:
    build:
      context: ./backend
    container_name: rmsa-backend
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_started
      mailhog:
        condition: service_started
    env_file:
      - compose.env
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - FRONTEND_URL=http://localhost:3000
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKER=kafka:9092
      # Storage (MinIO)
      - STORAGE_PROVIDER=minio
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      # Email (MailHog SMTP)
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
    ports:
      - "3001:3001"
    command: sh -c "npx prisma migrate deploy && npm run start:prod"

  frontend:
    build:
      context: ./frontend
    container_name: rmsa-frontend
    env_file:
      - compose.env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    ports:
      - "3000:3000"

volumes:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  mysql_data:
  minio_data:



