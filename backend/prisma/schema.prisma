// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  RESIDENT
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ComplaintPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(RESIDENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resident   Resident?
  complaints Complaint[] @relation("ComplaintAuthor")
  assignedComplaints Complaint[] @relation("ComplaintAssignee")
  complaintComments ComplaintComment[]
  notifications Notification[]

  @@map("users")
}

model Resident {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String
  lastName    String
  phone       String
  apartment   String
  floor       Int
  building    String
  moveInDate  DateTime
  isOwner     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyMembers FamilyMember[]

  @@map("residents")
}

model FamilyMember {
  id         String   @id @default(cuid())
  residentId String
  firstName  String
  lastName   String
  phone      String?
  email      String?
  relation   String
  isMinor    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  resident   Resident @relation(fields: [residentId], references: [id], onDelete: Cascade)

  @@map("family_members")
}

model Complaint {
  id          String           @id @default(cuid())
  title       String
  description String
  status      ComplaintStatus  @default(PENDING)
  priority    ComplaintPriority @default(MEDIUM)
  category    String
  authorId    String
  assigneeId  String?
  apartment   String
  building    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  resolvedAt  DateTime?

  // Relations
  author      User             @relation("ComplaintAuthor", fields: [authorId], references: [id])
  assignee    User?            @relation("ComplaintAssignee", fields: [assigneeId], references: [id])
  attachments ComplaintAttachment[]
  comments    ComplaintComment[]

  @@map("complaints")
}

model ComplaintAttachment {
  id          String    @id @default(cuid())
  complaintId String
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  createdAt   DateTime  @default(now())

  // Relations
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  @@map("complaint_attachments")
}

model ComplaintComment {
  id          String   @id @default(cuid())
  complaintId String
  authorId    String
  content     String
  createdAt   DateTime @default(now())

  // Relations
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  author      User      @relation(fields: [authorId], references: [id])

  @@map("complaint_comments")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
