name: End-to-End Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BACKEND_URL: http://localhost:3001
  FRONTEND_URL: http://localhost:3000

jobs:
  # Setup test environment
  setup-environment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install Frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build Backend
      working-directory: ./backend
      run: npm run build

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ env.BACKEND_URL }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/dist
          frontend/.next

  # Start services for testing
  start-services:
    needs: setup-environment
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9092:9092

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Setup database
      working-directory: ./backend
      run: |
        npx prisma generate
        npx prisma db push
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        JWT_SECRET: test-secret-key
        REDIS_URL: redis://localhost:6379
        KAFKA_BROKER: localhost:9092

    - name: Start Backend service
      working-directory: ./backend
      run: |
        npm run start:prod &
        BACKEND_PID=$!
        echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
        
        # Wait for backend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3001/health 2>/dev/null; then
            echo "Backend is ready!"
            break
          fi
          echo "Waiting for backend... ($i/30)"
          sleep 2
        done
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        JWT_SECRET: test-secret-key
        REDIS_URL: redis://localhost:6379
        KAFKA_BROKER: localhost:9092
        NODE_ENV: test

    - name: Start Frontend service
      working-directory: ./frontend
      run: |
        npm start &
        FRONTEND_PID=$!
        echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
        
        # Wait for frontend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done
      env:
        NEXT_PUBLIC_API_URL: http://localhost:3001

    - name: Wait for services
      run: |
        sleep 10
        echo "Services should be ready now"

  # API Integration Tests
  api-tests:
    needs: start-services
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install test dependencies
      run: npm install -g newman

    - name: Run API tests with Newman
      run: |
        # Test basic API endpoints
        curl -X GET http://localhost:3001/api/users || echo "Users endpoint test"
        curl -X GET http://localhost:3001/api/residents || echo "Residents endpoint test"
        curl -X GET http://localhost:3001/api/complaints || echo "Complaints endpoint test"
        
        # Test authentication
        curl -X POST http://localhost:3001/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username":"test","password":"test"}' || echo "Auth test"

    - name: Run Backend E2E tests
      working-directory: ./backend
      run: npm run test:e2e
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        JWT_SECRET: test-secret-key
        REDIS_URL: redis://localhost:6379
        KAFKA_BROKER: localhost:9092

  # Frontend E2E Tests with Playwright
  frontend-e2e:
    needs: start-services
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Create basic E2E test
      working-directory: ./frontend
      run: |
        mkdir -p tests/e2e
        cat > tests/e2e/basic.spec.ts << 'EOF'
        import { test, expect } from '@playwright/test';

        test('should load homepage', async ({ page }) => {
          await page.goto('http://localhost:3000');
          await expect(page).toHaveTitle(/Resident Management/);
        });

        test('should show login form', async ({ page }) => {
          await page.goto('http://localhost:3000/login');
          await expect(page.locator('form')).toBeVisible();
        });

        test('should navigate to dashboard', async ({ page }) => {
          await page.goto('http://localhost:3000');
          // Add more specific tests based on your app structure
        });
        EOF

    - name: Run Playwright tests
      working-directory: ./frontend
      run: npx playwright test tests/e2e/
      continue-on-error: true

  # Performance Tests
  performance-tests:
    needs: start-services
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Create k6 performance test
      run: |
        mkdir -p tests/performance
        cat > tests/performance/load-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          stages: [
            { duration: '2m', target: 100 }, // Ramp up
            { duration: '5m', target: 100 }, // Stay at 100 users
            { duration: '2m', target: 0 },   // Ramp down
          ],
          thresholds: {
            http_req_duration: ['p(95)<500'], // 95% of requests under 500ms
            http_req_failed: ['rate<0.1'],   // Error rate under 10%
          },
        };

        export default function () {
          let response = http.get('http://localhost:3001/api/users');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          sleep(1);
        }
        EOF

    - name: Run performance tests
      run: k6 run tests/performance/load-test.js
      continue-on-error: true

  # Cleanup and Report
  cleanup-and-report:
    needs: [api-tests, frontend-e2e, performance-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate E2E Test Report
      run: |
        echo "## E2E Test Results" > e2e-report.md
        echo "- API Tests: ${{ needs.api-tests.result }}" >> e2e-report.md
        echo "- Frontend E2E Tests: ${{ needs.frontend-e2e.result }}" >> e2e-report.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> e2e-report.md
        
        if [[ "${{ needs.api-tests.result }}" == "success" && 
              "${{ needs.frontend-e2e.result }}" == "success" && 
              "${{ needs.performance-tests.result }}" == "success" ]]; then
          echo "✅ All E2E tests passed!" >> e2e-report.md
        else
          echo "❌ Some E2E tests failed!" >> e2e-report.md
        fi

    - name: Upload E2E Test Report
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-report
        path: e2e-report.md
